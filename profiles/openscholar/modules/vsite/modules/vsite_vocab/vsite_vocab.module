<?php

/**
 * @file
 * Integration with OG Vocabulary.
 */

/**
 * Implements hook_menu().
 */
function vsite_vocab_menu() {
  $items = array();

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    //'page callback' => 'cp_taxonomy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_vocabularies'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
    'description' => t('Manage your site\'s vocabularies')
  );

  $items["cp/build/taxonomy/add"] = array(
    'title' => 'Add vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_vocabulary'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function vsite_vocab_admin_paths() {
  return array(
    'cp/build/taxonomy/*/add' => TRUE,
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function vsite_vocab_entity_info_alter(&$info) {
  $info['og_vocab']['redirect'] = FALSE;
}

/**
 * Implements hook_menu_alter().
 *
 * Adding custom paths to the vocabulary actions.
 */
function vsite_vocab_menu_alter(&$items) {
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name'];
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name/add'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add'];
  $items['cp/build/taxonomy/%taxonomy_vocabulary_machine_name/edit'] = $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/edit'];

  if (variable_get('og_vocab_term_page_access', FALSE)) {
    $items['taxonomy/term/%taxonomy_term']['access callback'] = 'vsite_vocab_term_page_access';
    $items['taxonomy/term/%taxonomy_term']['access arguments'] = array(2);

    $items['taxonomy/term/%taxonomy_term/feed']['access callback'] = 'vsite_vocab_term_page_access';
    $items['taxonomy/term/%taxonomy_term/feed']['access arguments'] = array(2);
  }
}

/**
 * Menu access callback - implementing a custom taxonomy term access,
 */
function vsite_vocab_term_page_access($term) {
  if (!user_access('access content')) {
    return;
  }

  if (!$relation = og_vocab_relation_get($term->vid)) {
    // Term doesn't belong to OG-vocab
    return TRUE;
  }

  // Check if user has access to the group.
  $group = entity_load_single($relation->group_type, $relation->gid);
  $space = spaces_get_space();

  // If the vocab belongs to a vsite, make sure we are in that vsite.
  if($relation->group_type == 'node' && (!$space || $space->id != $relation->gid)){
		return FALSE;
  }

  return node_access('view', $group);
}

/**
 * Implements hook_field_create_instance().
 *
 * Add OG vocanulary field to a group-content bundle.
 */
function vsite_vocab_field_create_instance($instance) {
  if (!og_is_group_audience_field($instance['field_name'])) {
    return;
  }
  $og_field = og_fields_info(OG_VOCAB_FIELD);
  $og_field['instance']['display']['default']['label'] = 'hidden';
  $og_field['instance']['display']['default']['settings']['concatenate'] = TRUE;
  og_create_field(OG_VOCAB_FIELD, $instance['entity_type'], $instance['bundle'], $og_field);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary.
 *
 * 1) Limit avalible bundles to just Publc/Private bundles in OS.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_alter().
 */
function vsite_vocab_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if (!isset($form['og_vocab'])) {
    return;
  }

  // Hiding elements in the form.
  ctools_include('dependent');
  $form['og_vocab']['#access'] = FALSE;
  $form['machine_name']['#access'] = FALSE;
  $form['#submit'][] = 'vsite_vocab_form_taxonomy_form_vocabulary_submit';

  if (empty($form_state['vocabulary']->vid)) {
    // Because we hide the machine name text field, og_vocab validate function
    // will fail due to the fact that there is no machine name. Reversing the
    // order of the validation functions will take care of that and enable us to
    // create OG vocabularies with the same human readable name in other groups.
    array_unshift($form['machine_name']['#element_validate'], 'vsite_vocab_form_taxonomy_form_vocabulary_validate');
  }

  // Init variables.
  $required = FALSE;
  $widget = 'options_select';
  $cardinality = FIELD_CARDINALITY_UNLIMITED;

  // Add description for the name.
  $form['name']['#description'] = t('The vocabulary name. E.g. "Research interests"');

  // Get enabled bundles.
  $all_bundles = array(
    'node' => os_get_bundles(array(1,2)),
    'file' => array_diff_key(os_files_get_bundles(), array('undefined' => 0)),
  );
  
  if (isset($all_bundles['file']['html'])) {
    $all_bundles['file']['html'] = t('Embedded Media');
  }

  // Loop through all of the content types and build their checkboxe's.
  $form['bundles'] = array();
  $default_bundles = array();
  foreach ($all_bundles as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $bundle_label) {
      $vid = !empty($form['vid']['#value']) ? $form['vid']['#value'] : 0;
      $og_vocab = og_vocab_load_og_vocab($vid, $entity_type, $bundle, NULL, TRUE);
      $options[$bundle] = check_plain($bundle_label);
      if (empty($og_vocab->is_new)) {
        $default_bundles[$bundle] = TRUE;
      }

      $required = !$required ? $og_vocab->settings['required'] : $required;
      $widget = $widget == 'options_select' ? $widget = $og_vocab->settings['widget_type'] : $widget;
      $cardinality = $cardinality == FIELD_CARDINALITY_UNLIMITED ? $cardinality = $og_vocab->settings['cardinality'] : $cardinality;
    }
  } 
  
  $form['bundles'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Content types'),
    '#options' => array('Posts' => $all_bundles['node'], 'Files' => $all_bundles['file']),
    '#default_value' => array_keys($default_bundles),
    '#description' => t('Select the content types to categorize using this vocabulary.'),
    '#required' => TRUE,
    '#after_build' => array('os_select2_widget_after_build'),
    '#cardinality' => '-1',
    '#attached' => array(
      'css' => array(
        libraries_get_path('select2') . '/select2.css',
        drupal_get_path('module', 'os') . '/css/select2-widget.css',
      ),
      'js' => array(
        libraries_get_path('select2') . '/select2.min.js',
        drupal_get_path('module', 'os') . '/js/select2-widget.js',
      ),
    ),
  );

  // Adding settings for the OG vocab settings.
  $form['required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#description' => t('If checked, the post must be tagged / categorized with at least one term from this vocabulary.'),
    '#default_value' => $required,
  );

  $form['widget_type_autocomplete'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#description' => t('Should terms be created on advanced or may be created on the fly, when adding / editing a post.'),
    '#options' => array(
      'entityreference_autocomplete' => t('Managed'),
      'entityreference_autocomplete_tags' => t('Tags style'),
    ),
    '#default_value' => in_array($widget, array('entityreference_autocomplete', 'entityreference_autocomplete_tags')) ? $widget : 'entityreference_autocomplete',
  );

  $form['widget_type'] = array(
    '#type' => 'radios',
    '#title' => t('Form element type'),
    '#description' => t('The type of display and how terms are selected when adding / editing a post.'),
    '#default_value' => in_array($widget, array('entityreference_autocomplete', 'entityreference_autocomplete_tags')) ? 'entityreference_autocomplete' : $widget,
    '#options' => array(
      'entityreference_autocomplete' => t('Autocomplete'),
      'options_select' => t('Select list'),
      'options_buttons' => t('Check boxes / Radio buttons'),
    ),
    '#dependency' => array('radio:widget_type_autocomplete' => array('entityreference_autocomplete')),

  );

  $form['cardinality'] = array(
    '#type' => 'select',
    '#title' => t('Max number of terms per post'),
    '#options' => array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + drupal_map_assoc(range(1, 10)),
    '#default_value' => $cardinality,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Using the hook_form_alter and not hook_form_FORM_ID_alter due to the
 * invokes order of the hooks.
 */
function vsite_vocab_form_alter(&$form, $form_state, $form_id) {
  if (!in_array($form_id, array('taxonomy_form_vocabulary', 'taxonomy_overview_terms')) || !$context = og_vocab_is_group_admin_context()) {
    return;
  }
  $form['#submit'][] = 'vsite_vocab_redirect_to_group_vocabularies';
  $form['#attached']['js'][] = drupal_get_path('module', 'vsite_vocab') . '/js/vsite_vocab.js';
}

/**
 * After deleting the group vocabulary, redirect to the taxonomy group admin
 * page.
 */
function vsite_vocab_redirect_to_group_vocabularies($form, &$form_state) {
  $form_state['redirect'] = 'cp/build/taxonomy';

  if ($form['#form_id'] == 'taxonomy_overview_terms' && !empty($form_state['confirm_reset_alphabetical']) && !empty($form_state['complete form']['machine_name']['#value'])) {
    // Redirect back to the terms overview, after "Reset alphabetical"
    // was submitted.
    $form_state['redirect'] .= '/' . $form_state['complete form']['machine_name']['#value'] . '/list';
  }
}

/**
 * Validate handler; Set the machine name of the vocabulary.
 */
function vsite_vocab_form_taxonomy_form_vocabulary_validate($element, &$form_state) {
  // Manually create the machine name.
  $machine_name = $form_state['values']['name'];
  if(module_exists('transliteration')) {
	  $machine_name = transliteration_get($machine_name);
  }
  $machine_name = substr(preg_replace('@[^a-z0-9_]+@', '', strtolower($machine_name)), 0, 32);
  // Avoid empty machine name when transliteration not enabled or fails
  $machine_name = empty($machine_name) ? variable_get('vsite_vocab_name_default', 'vocab') : $machine_name;
  // Start iterating over machine names until we hit one that doesn't
  // exist yet.
  $i = 1;
  while (taxonomy_vocabulary_machine_name_load($machine_name)) {
    $machine_name = substr($machine_name, 0, 32 - strlen($i)) . $i;
    ++$i;
  }
  form_set_value($element, $machine_name, $form_state);
}
/**
 * Implements hook_field_attach_view_alter().
 */
function vsite_vocab_field_attach_view_alter(&$output, $context) {
  if (empty($output[OG_VOCAB_FIELD][0]['#markup'])) {
    return;
  }
  $original = $output[OG_VOCAB_FIELD][0]['#markup'];

  if (count($output[OG_VOCAB_FIELD]['#items']) > 3) {
    // Show links collapsed.
    $output[OG_VOCAB_FIELD][0]['#markup'] = '<a href="#" class="toggle" >' . t('See also:') . '</a><div class="os-slider">'. $original .'</div>';

    $output['#attached']['js'][] = drupal_get_path('module', 'os').'/theme/os_toggle.js';
  }
  else {
    $output[OG_VOCAB_FIELD][0]['#markup'] = t('See also: !terms', array('!terms' => $original));
  }
}

/**
 * Implements hook_og_vocab_is_admin_context().
 */
function vsite_vocab_og_vocab_is_admin_context() {
  if (strpos($_GET['q'], 'cp/build/taxonomy') === 0 && $space = spaces_get_space()) {
    return array('group_type' => 'node', 'gid' => $space->id);
  }
}

/**
 * Custom submit handler: handling the custom form submit of os_vocab.
 *
 * The original OG vocabularies set the $og_vocab in the form elements and use
 * them in his submit handler. OS vocab doesn't use the original form elements,
 * therefore we implements both of the logics in this submit handler.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_submit().
 */
function vsite_vocab_form_taxonomy_form_vocabulary_submit(&$form, &$form_state) {
  $vid = empty($form_state['vocabulary']->vid) ? 0 : $form_state['vocabulary']->vid;
  $values = $form_state['values'];

  $all_bundles = array(
    'node' => os_get_bundles(array(1,2)),
    'file' => os_files_get_bundles(),
  );

  foreach ($all_bundles as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $bundle_label) {
      $og_vocab = og_vocab_load_og_vocab($vid, $entity_type, $bundle);

      if (empty($og_vocab)) {
        $og_vocab = og_vocab_create_og_vocab($vid, $entity_type, $bundle);
      }
  
      if ((!isset($values['bundles'][$bundle]) || !($values['bundles'][$bundle])) && empty($og_vocab->is_new)) {
        $og_vocab->delete();
        continue;
      }
  
      if (isset($values['bundles'][$bundle]) && $values['bundles'][$bundle]) {
        $og_vocab->settings['required'] = $values['required'];
        $og_vocab->settings['cardinality'] = $values['cardinality'];
        $values['widget_type'] = $values['widget_type_autocomplete'] == 'entityreference_autocomplete' ? $values['widget_type'] : $values['widget_type_autocomplete'];
        $og_vocab->settings['widget_type'] = $values['widget_type'];
        $og_vocab->save();
      }
    }
  }

  // Change the destination of the page after submiting the form.
  $_GET['destination'] = 'cp/build/taxonomy/';
}

/**
 * Override theme_taxonomy_overview_vocabularies() to change the actions path.
 *
 * Changing the links path of the vocabulry CRUD operations.
 *
 * @see theme_og_vocab_taxonomy_overview_vocabularies().
 */
function vsite_vocab_preprocess_taxonomy_overview_vocabularies(&$variables) {
  foreach (array_keys($variables['form']) as $element_key) {
    // Each row in the table have an integer key, therefor processing only
    // integer keys.
    if (!is_integer($element_key)) {
      continue;
    }

    $element = &$variables['form'][$element_key];
    $element['list']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name;
    $element['add']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name . '/add';
    $element['edit']['#href'] = 'cp/build/taxonomy/' . $element['#vocabulary']->machine_name . '/edit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vsite_vocab_form_taxonomy_overview_terms_alter(&$form, $form_state) {
  if (empty($form['#vocabulary'])) {
    return;
  }

  $path = 'cp/build/taxonomy/' . $form['#vocabulary']->machine_name . '/add';
  $form['#empty_text'] = t('No terms available. <a href="@link">Add term</a>.', array('@link' => url($path)));
  $form['#submit'][] = 'vsite_vocab_invalidate_entitycache';
}

/**
 * When updating the weight of the vocabulary terms we need to invalidate
 * the entity cache for the taxonomy terms.
 */
function vsite_vocab_invalidate_entitycache($form, $form_state) {
  if (!db_table_exists('cache_entity_taxonomy_term')) {
    // Entity cache module is disabled.
    return;
  }
  cache_clear_all('*', 'cache_entity_taxonomy_term', TRUE);
}

/**
 * Implements hook_field_field_formatter_info_alter().
 */
function vsite_vocab_field_formatter_info_alter(&$info) {
  $info['og_vocab']['module'] = 'vsite_vocab';
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vsite_vocab_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  return og_vocab_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function vsite_vocab_field_formatter_settings_summary($field, $instance, $view_mode) {
  return og_vocab_field_formatter_settings_summary($field, $instance, $view_mode);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Implements our own OG vocab field formatter; When a node is tagged to terms
 * and the user remove the relationship between the vocabulary to the node type
 * then we don't need to show the terms of the vocab.
 *
 * This will also prevent from us to deal with removing the terms when the
 * relationship is deleted.
 *
 * @see og_vocab_field_formatter_view().
 */
function vsite_vocab_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);
  if (!og_vocab_is_og_vocab_field($entity_type, $field['field_name'], $bundle)) {
    return array('#markup' => t('OG Vocabulary formatter should be used only on "Entity reference" fields with "OG complex" widgets.'));
  }

  if (!$items) {
    return;
  }

  // When remove a relation between bundle and OG vocab we need to hide the
  // terms from the vocab.
  $hide_terms = array();
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  foreach ($wrapper->{OG_VOCAB_FIELD} as $term_wrapper) {
    if (!$term_wrapper->value()) {
      // Term was deleted.
      continue;
    }
    if (!og_vocab_load_og_vocab($term_wrapper->vocabulary->getIdentifier(), $wrapper->type(), $wrapper->getBundle())) {
      $hide_terms[] = $term_wrapper->getIdentifier();
    }
  }

  $tids = array();
  foreach ($items as $item) {
    if (in_array($item['target_id'], $hide_terms)) {
      continue;
    }
    $tids[] = $item['target_id'];
  }

  $terms = taxonomy_term_load_multiple($tids);
  $ordered_terms = array();

  foreach ($terms as $term) {
    $vocabulary = taxonomy_vocabulary_load($term->vid);
    $ordered_terms[] = array(
      'term' => $term,
      'weight' => $vocabulary->weight,
      'vid' => $vocabulary->vid,
    );
  }

  uasort($ordered_terms, 'og_vocab_sort_weight');

  // Re-build the terms array, as it is now ordered.
  $terms = array();
  foreach ($ordered_terms as $info) {
    $terms[] = $info['term'];
  }

  $settings = $display['settings'];

  if ($settings['concatenate']) {
    $values = array();
    foreach ($terms as $term) {
      $url = entity_uri('taxonomy_term', $term);
      $values[] = l($term->name, $url['path']);
    }

    $element[0] = array('#markup' => implode(', ', $values));
    return $element;
  }

  // Iterate over each term and group by vocabulary.
  $data = array();
  foreach ($terms as $term) {
    if (empty($data['vocabulary'][$term->vid])) {
      $vocab = taxonomy_vocabulary_load($term->vid);
      $data['vocabulary'][$term->vid] = check_plain($vocab->name);
    }
    $url = entity_uri('taxonomy_term', $term);
    $data['term'][$term->vid][] = l($term->name, $url['path']);
  }

  if (!$data) {
    return;
  }

  $element = array();
  foreach ($data['term'] as $vid => $values) {
    $element[0][$vid] = array('#theme' => 'item_list', '#items' => $values, '#title' => $data['vocabulary'][$vid]);
  }

  return $element;
}
