<?php

/**
 * @files
 * OpenScholar files private module file.
 */

include_once('os_files_private.features.inc');

define('OS_FILES_PRIVATE_PATH', "cp/content/files-private");

/**
 * Implements hook_os_app_info().
 */
function os_files_private_os_app_info() {
  $apps = array();

  $apps['os_files_private'] = array(
    'path' => OS_FILES_PRIVATE_PATH,
  );

  return $apps;
}

/**
 * Implements hook_menu().
 */
function os_files_private_menu() {
  $items = array();
  // Named like 'features/$feature_name' by features/spaces convention.
  $items['features/os_files_private'] = array(
    'title' => 'Private Files Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_files_private_settings'),
    'access callback' => module_exists('spaces') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('spaces') ? array() : array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'os_files_private.pages.inc',
  );

  return $items;
}

function os_files_private_menu_alter(&$items) {
  $items['file/add/private'] = $items['file/add'];
}

/**
 * Implements hook_form_FORM_ID_alter() for file_entity_add_upload.
 *
 * Set the URI schema to private when adding a new file via file/add.
 *
 * @see file_entity_add_upload()
 */
function os_files_private_form_file_entity_add_upload_alter(&$form, $form_state) {

  $item = menu_get_item();
  if (!($item['path'] == 'file/add/private' || $item['path'] == 'file/ajax') || !spaces_get_space()) {
    return;
  }

  drupal_set_title('Add Private File');

  // Alerts user if private file path has not been set.
  if (!variable_get('file_private_path')) {
    drupal_set_message(t('Unable to add private files at this time. Please contact the site administrator.'), 'warning');
    return;
  }

  $private_upload_location = "private://" . vsite_get_purl();

  if ($item['path'] == 'file/ajax'){
    // File Ajax is used in multiple locations not all of them are used in private file uploads
    // Check the previous form state and make sure the file location was set to private
    if(!isset($form_state['complete form']) || $form_state['complete form']['upload']['#upload_location'] != $private_upload_location){
      return;
    }
  }

  $form['upload']['#upload_location'] = $private_upload_location;
  $form['#submit'][] = 'os_files_private_form_file_entity_add_upload_submit';
}

/**
 * Implements hook_form_FORM_ID_alter() for file_entity_edit.
 *
 * Set the default group to the current user in file/%fid/edit.
 * @todo Use the correct field function to set the default
 */
function os_files_private_form_file_entity_edit_alter(&$form, &$form_state) {
  if(module_exists('vsite')){
    $vsite = spaces_get_space();
    if($vsite){
      $form['og_group_ref']['und']['0']['default']['#default_value'] = $vsite->id;
    }
  }
}

/**
 * Submit handler; Redirect to Private Files listing after file upload.
 *
 * @see file_entity_add_upload_submit()
 */
function os_files_private_form_file_entity_add_upload_submit($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);

  // Redirect to the file edit page after submission.
  if (file_entity_access('update', $file)) {
    $destination = array('destination' => OS_FILES_PRIVATE_PATH);
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  elseif (overlay_get_mode() == 'child') {
    overlay_close_dialog();
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}

/**
 * Implements hook_file_download().
 *
 * Checks for access rules and serves file if all rules pass.
 */
function os_files_private_file_download($uri) {
  // Does nothing if the download URI is not private--
  // Default Drupal 7 private URIs start with "/system/...".
  // This prevents os_files_private from interfering with other modules'
  // download hooks; like media's "Download original image" link in media
  // gallery.
  if (arg(0) !== 'system') {
    return;
  }

  // Restricts all access if Private Files app is disabled.
  if ($vsite = vsite_get_vsite()) {
    $apps = variable_get('spaces_features');

    $wrapper = entity_metadata_wrapper('node', $vsite->group);
    // Retrieve the site privacy. We don't want to check the feature settings if this is an intranet site.
    $site_privacy = (module_exists('vsite_access') && !empty($wrapper->{VSITE_ACCESS_FIELD}))? $wrapper->{VSITE_ACCESS_FIELD}->value():0;

    if ((module_exists('vsite_access') && $site_privacy < VSITE_ACCESS_INTRANET_PRIVATE) && isset($apps['os_files_private']) && (int) $apps['os_files_private'] !== 1) {
      return -1;
    }
  }

  // Returns nothing if file cannot be found.
  $fid = _os_files_private_fid_from_uri($uri);
  if (!$fid || !($file = file_load($fid))) {
    return;
  }

  // Getting this far means the app is enabled and the file exists.
  // First: serves the file to site members.
  if (_os_files_private_site_member($file)) {
    return file_get_content_headers($file);
  }

  // If we are not in a vsite get site privacy from the file.
  if(!$vsite){
    $wrapper = entity_metadata_wrapper('file', $file);
    // Restricts access if no OG audience is set.
    if (isset($wrapper->{OG_AUDIENCE_FIELD}) && ($gid = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)))) {
      // Load Group.
      $group = node_load($gid[0]);
      // Get the group privacy.
      if($group && ($wrapper = entity_metadata_wrapper('node', $group)) && !empty($wrapper->{VSITE_ACCESS_FIELD})){
        $site_privacy = $wrapper->{VSITE_ACCESS_FIELD}->value();
      }
    }
  }

  // This site is private, this is not a site member, and private file access is controlled by another module.
  if (isset($site_privacy) && (module_exists('vsite_access') && $site_privacy > VSITE_ACCESS_INTRANET_PRIVATE)) {
    return;
  }

  // Getting this far means the user is authenticated, but is both not a site
  // member and is unable to login via pinserver. User is not allowed to access.
  // Restricts access.
  return -1;
}

/**
 * Returns TRUE if the logged in user is a site member of the given file.
 */
function _os_files_private_site_member($file) {
  if (user_access('administer group')) {
    return TRUE;
  }

  // Default: restricts to site members only.
  $wrapper = entity_metadata_wrapper('file', $file);
  // Set $gid[0] to something so og_is_member() below can't complain.
  $gid = array(NULL);

  // Restricts access if no OG audience is set.
  if (!isset($wrapper->{OG_AUDIENCE_FIELD}) || !($gid = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)))) {
    return FALSE;
  }
  // Otherwise, returns TRUE if user is site member.
  return og_is_member('node', $gid[0]);
}

/**
 * Looks up a file's URI, returns the file ID (fid) or '' if none found.
 */
function _os_files_private_fid_from_uri($uri) {
  $file = array();
  $restrict_mode = variable_get('os_files_private_restrict_mode', 'site_members');
  $query = new EntityFieldQuery;

  $result = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', $uri, '=')
    ->addMetaData('account', user_load(1))
    ->execute();

  return isset($result['file']) ? reset(array_keys($result['file'])) : '';
}

/**
 * Implements hook_form_FORM_ID_alter() for spaces_features_form.
 *
 * Alters the features form in the cp to remove un-needed componentes
 */
function os_files_private_form_spaces_features_form_alter(&$form, &$form_state, $form_id) {
  // Only alters form if we are in the OpenScholar Control Panel context and this is an intranet install.
  if (!context_isset('context', 'os_cp') || variable_get('file_default_scheme') != 'private') {
    return;
  }

  //Remove this app from the features form, this is not optional for Intranet's
  if(isset($form['spaces_features']['os_files_private'])){
    unset($form['spaces_features']['os_files_private']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_files_private_form_file_entity_delete_form_alter(&$form, $form_state) {
  if (strpos($form_state['file']->uri, 'private') === 0) {
    $form['#submit'][] = 'os_files_private_redirect_after_delete_file';
  }
}

/**
 * When deleting a private file the user need to stay files CP.
 */
function os_files_private_redirect_after_delete_file($form, &$form_state) {
  $form_state['redirect'] = 'cp/content/files-private';
}

/**
 * Removes tabs that we don't want when we're uploading a private file
 */
function os_files_private_menu_local_tasks_alter(&$tasks, $router, $root) {
  if ($root == 'file/add') {
    $tasks['tabs'][0]['count'] = 0;
    $tasks['tabs'][0]['output'] = array();
  }
}

/**
 * Implements hook_stream_wrappers_alter().
 *
 * Used to extend the private stream wrapper.
 *
 * @param array $wrappers
 */
function os_files_private_stream_wrappers_alter(&$wrappers){
  if (isset($wrappers['private']) && $wrappers['private']['class'] != 'OSPinserverPrivateStreamWrapper') {
    $wrappers['private']['class'] = 'OSFilesPrivateStreamWrapper';
  }
}
