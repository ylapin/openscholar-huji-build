<?php

/**
 * Implements hook_init
 */
function hwpi_init() {
  global $conf;

  // Is securepages enabled?
  // If we are not on a harvard domain turn it off.
  if (variable_get('securepages_enable', 0)) {

    //Turn SSL off for pages that don't match the wildcard certificate
    $conf['securepages_enable'] = 0;

    // Loop through the domains that are configured to work with our SSL certificate
    foreach (variable_get('hwpi_ssl_domains',array()) as $domain) {
      $offset = (strlen($domain) * -1);
      // Check to see if the current domain matches one of our wildcard domains in the SSL cert.
      // IF the cert has ".harvard.edu" then "foo.harvard.edu" is valid and we should enable, whild "bar.foo.harvard.edu" is not.
      if(substr($_SERVER['HTTP_HOST'],$offset) == $domain && !strrpos($_SERVER['HTTP_HOST'],".",($offset-1))){
        //We found a Match
        $conf['securepages_enable'] = 1;
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function hwpi_preprocess_page(&$vars) {
  if (_is_hwpi_theme()) {
    $vars['page']['branding_header']['hwpi'] = _hwpi_branding_header();
    $vars['page']['branding_footer']['hwpi'] = _hwpi_branding_footer();
  }
}

/**
 * Returns if the active theme uses hwpi_basetheme as one of it's base theme.
 *
 * @return bool
 */
function _is_hwpi_theme($theme_name = NULL) {
  if (is_null($theme_name)) {
    $theme_name = $GLOBALS['theme'];
  }
  $themes = list_themes();
  if (isset($themes[$theme_name])) {
    $t = $themes[$theme_name];
    if (isset($t->base_themes) && isset($t->base_themes['hwpi_basetheme'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns a build array for the HWPI branding header page region.
 *
 * @return array
 */
function _hwpi_branding_header() {
  $header = array();
  $header['left_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'branding-left',
      ),
    ),
    'img' => array(
      '#theme' => 'link',
      '#path' => 'http://www.harvard.edu',
      '#text' => theme('image', array('path' => drupal_get_path('theme', 'hwpi_basetheme') . '/images/harvard-logo.png', 'width' => 259, 'height' => 35, 'alt' => 'Harvard Logo')),
      '#options' => array(
        'external' => TRUE,
        'html' => TRUE,
        'attributes' => array(),
      ),
    ),
  );
  $sites = _hwpi_get_ancestry();
  $links = array();
  foreach ($sites as $path => $title) {
    $links[] = l($title, $path);
  }
  $header['right_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'branding-right',
      ),
    ),
    'sitecrumbs' => array(
      '#type' => 'markup',
      '#markup' => implode(' | ', $links),
    ),
  );

  return $header;
}

/**
 * Returns website parents in an ordered, keyed array.
 *
 * Note: The returned array uses URLs as keys, and case-sensitive titles as
 * values. The top-most level of the array is hard-coded to be 'HARVARD.EDU',
 * site organization taxonomy terms are second-highest, and sub-site relations
 * will appear as the most-specific, lowest-level ancestor.
 *
 * @return array
 *   An array keyed by fully-qualified absolute URLs, values are link title text.
 */
function _hwpi_get_ancestry() {
  $sites = array();
  if ($vsite = spaces_get_space()) {
    // First, looks for parent vsites and adds them to hierarchy.
    $vsite_original = $vsite;
    $group = $vsite->group;
    while (isset($group->field_group_parent) && $group->field_group_parent) {
      $items = field_get_items('node', $group, 'field_group_parent');
      $vsite = vsite_get_vsite($items[0]['target_id']);
      $group = $vsite->group;
      $sites[$vsite->get_absolute_url()] = $group->title;
    }

    // Then, looks for site organization terms and adds them to hierarchy.
    $items = field_get_items('node', $vsite_original->group, 'field_organization');
    if (is_array($items) && !empty($items)) {
      $tid = $items[0]['tid'];
      $items = field_get_items('taxonomy_term', taxonomy_term_load($tid), 'field_site_url');
      if (isset($items[0])) {
        $site_url = $items[0];
        while ($site_url) {
          $sites[$site_url['url']] = $site_url['title'];
          $parents = taxonomy_get_parents($tid);
          if (empty($parents)) {
            break;
          }
          $tid = array_shift(array_keys($parents));
          $items = field_get_items('taxonomy_term', taxonomy_term_load($tid), 'field_site_url');
          if (isset($items[0])) {
            $site_url = $items[0];
          }
          else {
            $site_url = FALSE;
          }
        }
      }
    }
  }

  // Hard-codes "HARVARD.EDU" as the highest parent item.
  $sites['http://www.harvard.edu'] = 'HARVARD.EDU';
  return $sites;
}

/**
 * Returns a build array for the standard branding footer region (copyright).
 *
 * @return array
 *   A build array ready to render footer info.
 */
function _hwpi_branding_footer() {
  $footer = array();
  $footer['hwpi_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'copyright',
      ),
    ),
    'copyright' => array(
      '#markup' => t('<span class="harvard-copyright">Copyright &copy; @year The President and Fellows of Harvard College</span> !privacy | !access', array(
          '!privacy' => variable_get('privacy_policy','')?'| '.l('Privacy', variable_get('privacy_policy')): '',
          '!access' => l('Accessibility', 'http://accessibility.harvard.edu/'),
          '@year' => date('Y'),
        )),
    ),
  );

  return $footer;
}

/**
 * Implements hook_cp_settings().
 */
function hwpi_cp_settings() {
  // For non-user-1, only adds the responsive setting for HWPI-themed sites.
  $theme = variable_get('theme_default');
  if (!_is_hwpi_theme($theme) && !user_access('administer themes')) {
    return;
  }

  $settings = array(
    'enable_responsive' => array(
      'group' => array(
        '#title' => t('Responsive'),
        '#id' => 'responsive',
      ),
      'form' => array(
        '#type' => 'checkbox',
        '#default_value' => variable_get('enable_responsive', FALSE),
        '#title' => t('Enable responsive behaviors'),
        '#description' => t('Responsive behaviors will change the layout of your page to fit the screens of smaller devices, such
          as phones or tablets. Disabling this will prevent the layout from changing, but could make using your site more difficult
          on smaller devices.'),
      ),
    ),
    'privacy_policy' => array(
      'group' => array(
        '#title' => t('Privacy'),
        '#id' => 'privacy',
      ),
      'form' => array(
        '#type' => 'textfield',
        '#default_value' => variable_get('privacy_policy', ''),
        '#title' => t('Privacy Policy'),
        '#description' => t('Enter a link to the privacy policy you wish to use for your site. Can be a link to a post on your own site.'),
      )
    )
  );

  return $settings;
}

/**
 * Implements hook_block_view_alter().
 *
 * Hides the search bar title display.
 */
function hwpi_block_view_alter(&$render, $block) {
  if ($block->delta == 'site-search' && _is_hwpi_theme()) {
    unset($render['content']['search_block_form']['#title_display']);
  }
}

/**
 * Implements hook_node_insert().
 */
function hwpi_node_insert($node) {
  // Only continues if the new node is an OG group type.
  if (!og_is_group_type('node', $node->type)) {
    return;
  }

  // Only continues to alter settings if the site's theme is HWPI.
  $vsite = vsite_get_vsite($node->nid);
  $theme = $vsite->controllers->variable->get('theme_default');
  if (!_is_hwpi_theme($theme)) {
    return;
  }

  // Sets all HWPI-theme-specific variable defaults.
  hwpi_theme_set_defaults();
}

/**
 * Implements hook_form_FORM_ID_alter() for cp_appearance_theme_picker_form.
 */
function hwpi_form_cp_appearance_theme_picker_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'hwpi_theme_picker_form_submit';
}

/**
 * Submit callback for cp_appearance_theme_picker_form.
 */
function hwpi_theme_picker_form_submit($form, &$form_state) {
  // Only continues if a theme value is set.
  if (!isset($form_state['values']['theme_default'])) {
    return;
  }

  // Only continues if the selected theme is HWPI.
  $selected_theme = $form_state['values']['theme_default'];
  if (!_is_hwpi_theme($selected_theme)) {
    return;
  }

  // Sets all HWPI-theme-specific variable defaults.
  hwpi_theme_set_defaults();
}

/**
 * Sets all HWPI-theme-specific variable defaults.
 *
 * @see hwpi_form_cp_appearance_theme_picker_form_alter()
 * @see
 */
function hwpi_theme_set_defaults() {
  // Declares settings specific to HWPI themes.
  $settings = array(
    'os_breadcrumbs_show_breadcrumbs' => 0,
    'enable_responsive' => 1,
  );

  // Sets all HWPI-theme-specific settings.
  foreach ($settings as $name => $value) {
    if ($space = spaces_get_space()) {
      $space->controllers->variable->set($name, $value);
    }
    else {
      variable_set($name, $value);
    }
  }
}
