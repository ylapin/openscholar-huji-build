<?php

/**
 * @file
 * OS wysiwyg main module file.
 */

/**
 * Implements hook_media_token_to_markup_alter().
 */
function os_wysiwyg_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  if (empty($settings['wysiwyg'])) {
    unset($element['content']['#prefix'], $element['content']['#suffix']);
  
    if (isset($settings['width'])) {
      $element['content']['file']['#attributes']['width'] = $settings['width'];
    }
    if (isset($settings['height'])) {
      $element['content']['file']['#attributes']['height'] = $settings['height'];
    }
  
    $container_settings = array();
    foreach ($settings['attributes'] as $attr => $val) {
      if ($attr != 'class' && $attr != 'height' && $attr != 'width') {
        $container_settings[$attr] = $val;
      }
    }
  
    if (isset($container_settings['style'])) {
      $s = &$container_settings['style'];
      if (strpos($s, 'display: block;') !== FALSE &&
          strpos($s, 'margin-left: auto;') !== FALSE &&
          strpos($s, 'margin-right: auto;') !== FALSE) {
        // This was supposed to be centered, and could be an image. Add
        // text-align center so the image inside will be centered after all.
        $s .= ' text-align: center;';
      }
    }
  
    $element += array(
      '#prefix' => '<span '.drupal_attributes($container_settings).'>',
      '#suffix' => '</span>',
    );
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function os_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {
  // Settings there are no UI options for.
  $settings['gecko_spellcheck'] = true;
  $settings['theme_advanced_path'] = false;
  $settings['theme_advanced_statusbar'] = false;
  drupal_add_css(drupal_get_path('module', 'os_wysiwyg') . '/os_wysiwyg.css');

  _os_wysiwyg_add_public_css($settings, $context);
  if ($context['profile']->format == 'filtered_html') {

    // Reorder buttons.
    // TODO: remove when WYSIWYG module can do this for us

    // Format select buttons.
    $btns = explode(',', $settings['theme_advanced_buttons1']);
    $format_start = array_search('formatselect', $btns);
    $selects = array_splice($btns, $format_start, 4);
    $format_start = array_search('pasteword', $btns);
    array_splice($btns, $format_start, 0, $selects);

    // Move some buttons to end of first row.
    $insert = array();

    // Media button.
    $media_start = array_search('media', $btns);
    $media = array_splice($btns, $media_start, 1);
    $insert = array_merge($insert, $media);

    // Teaser break button.
    $teaser_start = array_search('break', $btns);
    $teaser = array_splice($btns, $teaser_start, 1);
    $insert = array_merge($insert, $teaser);

    // Toggle toolbar button.
    $toggle_start = array_search('pdw', $btns);
    $toggle = array_splice($btns, $toggle_start, 1);
    $insert = array_merge($insert, $toggle);

    // os_wysiwyg_link button.
    $link_start = array_search('os_link', $btns);
    $link = array_splice($btns, $link_start, 1);
    $unlink_start = array_search('unlink', $btns);
    array_splice($btns, $unlink_start, 0, $link);

    array_splice($btns, $format_start, 0, $insert);

    $toolbarStart = array_search('pdw', $btns) + 1;
    $settings['theme_advanced_buttons2'] = implode(',', array_splice($btns, $toolbarStart));
    $settings['theme_advanced_buttons1'] = implode(',', $btns);

    // PDW settings
    $settings['pdw_toggle_toolbars'] = '2,3,4';
    $settings['pdw_toggle_on'] = 1;
  }
}

/**
 * Helper function to add css files.
 */
function _os_wysiwyg_add_public_css(&$settings, $context) {
  ctools_include('themes', 'os');
  $theme = os_theme_get();
  $flavor = os_theme_get_flavor();

  $css = _os_wysiwyg_get_theme_css($theme);

  $flavors = os_theme_get_flavors($theme);
  $flavor = variable_get('os_appearance_' . $theme . '_flavor', 'default');
  if ($flavor != 'default' && isset($flavors[$flavor])) {
    $flavor = $flavors[$flavor];
    if (isset($flavor['css'])) {
      foreach ($flavor['css'] as $file) {
        $css[] = $flavor['path'].'/'.$file;
      }
    }
  }

  $settings['content_css'] = implode(',', $css);
  $settings['body_class'] = "page-node not-front node node-inner content";
}

/**
 * Return valid wysiwyg sheets given a theme.
 */
function _os_wysiwyg_get_theme_css($theme) {
  $css = array();
  $themes = list_themes();
  if (!isset($themes[$theme])) return $css;

  $theme = $themes[$theme];
  if (!empty($theme->stylesheets)) {
    foreach ($theme->stylesheets as $media => $stylesheets) {
      //Skip print stylesheets
      if ($media != 'print') {
        foreach ($stylesheets as $name => $stylesheet) {
          if (file_exists($stylesheet)) {
            $css[] = base_path() . $stylesheet;
          }
        }
      }
    }
  }

  if (isset($theme->base_theme) && isset($themes[$theme->base_theme])) {
    $css = array_merge(_os_wysiwyg_get_theme_css($theme->base_theme), $css);
  }

  return $css;
}

/**
 * Adds the pdw plugin to the wysiwyg.
 */
function os_wysiwyg_wysiwyg_include_directory($type) {
  if ($type == 'plugins') {
    return $type;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Adds a pre-render to the text_format element.
 */
function os_wysiwyg_element_info_alter(&$elements) {
  $elements['text_format']['#attached']['js'][] = drupal_get_path('module', 'os_wysiwyg').'/os_wysiwyg.js';
}

/**
 * Implements hook_field_widget_info.
 * Defines a field form widget for expanding textarea wysiwygs
 */
function os_wysiwyg_field_widget_info() {
  return array(
    'os_wysiwyg_expanding_textarea' => array(
      'label' => t('Expanding Textarea'),
      'field types' => array(
        'text_long',
        'text_with_summary',
      ),
      'settings' => array(
        'rows' => 1,
        'max_rows' => 10,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'weight' => 3,
    ),
  );
}

/**
 * Implements hook_field_widget_form.
 */
function os_wysiwyg_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $info = element_info('text_format');
  $element += array(
    '#type' => 'text_format',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#rows' => 5,
    '#attributes' => array(
      'class' => array(
        'text-full',
        'os-wysiwyg-expandable'
      ),
      'data-maxrows' => $instance['widget']['settings']['max_rows'],
      'data-minrows' => $instance['widget']['settings']['rows']
    ),
    '#attached' => array(
      'js' => array_merge(array(
          drupal_get_path('module', 'os_wysiwyg').'/os_wysiwyg.widget.js',
        ),
        $info['#attached']['js']
      ),
      'css' => array(
        drupal_get_path('module', 'os_wysiwyg').'/os_wysiwyg.widget.css',
      )
    )
  );

  return $element;
}

/**
 * Implements hook_field_widget_settings_form.
 */
function os_wysiwyg_field_widget_settings_form($field, $instance) {
  $form = text_field_widget_settings_form($field, $instance);

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['rows']['#weight'] = -2;
  $form['rows']['#title'] = t('Collapsed Rows');
  $form['max_rows'] = array(
    '#type' => 'textfield',
    '#title' => t('Expanded Rows'),
    '#default_value' => $settings['max_rows'],
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
    '#weight' => -1
  );

  return $form;
}